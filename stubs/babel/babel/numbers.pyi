import decimal
from datetime import date
from typing import Any

from babel.core import Locale

long = int
LC_NUMERIC: Any

class UnknownCurrencyError(Exception):
    identifier: str
    def __init__(self, identifier: str) -> None: ...

def list_currencies(locale: Locale | str | None = ...) -> set[str]: ...
def validate_currency(currency: str, locale: Locale | str | None = ...) -> None: ...
def is_currency(currency: str, locale: Locale | str | None = ...) -> bool: ...
def normalize_currency(currency: str, locale: Locale | str | None = ...) -> str | None: ...
def get_currency_name(currency: str, count: float | None = ..., locale: Locale | str = ...) -> str: ...
def get_currency_symbol(currency: str, locale: Locale | str = ...) -> str: ...
def get_currency_precision(currency: str) -> int: ...
def get_currency_unit_pattern(currency: str, count: float | None = ..., locale: Locale | str = ...) -> str: ...
def get_territory_currencies(
    territory: str,
    start_date: date | None = ...,
    end_date: date | None = ...,
    tender: bool = ...,
    non_tender: bool = ...,
    include_details: bool = ...,
) -> list[str]: ...
def get_decimal_symbol(locale: Locale | str = ...) -> str: ...
def get_plus_sign_symbol(locale: Locale | str = ...) -> str: ...
def get_minus_sign_symbol(locale: Locale | str = ...) -> str: ...
def get_exponential_symbol(locale: Locale | str = ...) -> str: ...
def get_group_symbol(locale: Locale | str = ...) -> str: ...
def format_number(number: float | decimal.Decimal, locale: Locale | str = ...) -> str: ...
def get_decimal_precision(number: decimal.Decimal) -> int: ...
def get_decimal_quantum(precision: int | decimal.Decimal) -> decimal.Decimal: ...
def format_decimal(
    number: float | decimal.Decimal,
    format: Any | None = ...,
    locale=...,
    decimal_quantization: bool = ...,
    group_separator: bool = ...,
): ...
def format_compact_decimal(
    number: float | decimal.Decimal, *, format_type: str = ..., locale: Locale | str = ..., fraction_digits: int = ...
) -> str: ...

class UnknownCurrencyFormatError(KeyError): ...

def format_currency(
    number: float | decimal.Decimal,
    currency: str,
    format: str | None = ...,
    locale: Locale | str = ...,
    currency_digits: bool = ...,
    format_type: str = ...,
    decimal_quantization: bool = ...,
    group_separator: bool = ...,
): ...
def format_percent(
    number, format: Any | None = ..., locale=..., decimal_quantization: bool = ..., group_separator: bool = ...
): ...
def format_scientific(number, format: Any | None = ..., locale=..., decimal_quantization: bool = ...): ...

class NumberFormatError(ValueError):
    suggestions: Any
    def __init__(self, message, suggestions: Any | None = ...) -> None: ...

def parse_number(string, locale=...): ...
def parse_decimal(string, locale=..., strict: bool = ...): ...

PREFIX_END: str
NUMBER_TOKEN: str
PREFIX_PATTERN: Any
NUMBER_PATTERN: Any
SUFFIX_PATTERN: str
number_re: Any

def parse_grouping(p): ...
def parse_pattern(pattern): ...

class NumberPattern:
    pattern: Any
    prefix: Any
    suffix: Any
    grouping: Any
    int_prec: Any
    frac_prec: Any
    exp_prec: Any
    exp_plus: Any
    scale: Any
    def __init__(self, pattern, prefix, suffix, grouping, int_prec, frac_prec, exp_prec, exp_plus) -> None: ...
    def compute_scale(self): ...
    def scientific_notation_elements(self, value, locale): ...
    def apply(
        self,
        value,
        locale,
        currency: Any | None = ...,
        currency_digits: bool = ...,
        decimal_quantization: bool = ...,
        force_frac: Any | None = ...,
        group_separator: bool = ...,
    ): ...
